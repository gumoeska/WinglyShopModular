// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WinglyShop.Infrastructure;

#nullable disable

namespace WinglyShop.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240509101759_Changing_Role_Property")]
    partial class Changing_Role_Property
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WinglyShop.Domain.Entities.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("postalCode");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("PK__Address__3213E83F9BF396CD");

                    b.HasIndex("IdUser");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.CartDetails.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdCart")
                        .HasColumnType("int")
                        .HasColumnName("idCart");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__CartDeta__3213E83F29BC9089");

                    b.HasIndex("IdCart");

                    b.HasIndex("IdProduct");

                    b.ToTable("CartDetail", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Carts.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalValue");

                    b.HasKey("Id")
                        .HasName("PK__Cart__3213E83FC0727DE4");

                    b.HasIndex("IdUser");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.HasKey("Id")
                        .HasName("PK__Category__3213E83F89EE8816");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.OrderDetails.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("idAddress");

                    b.Property<int?>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("idOrder");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__OrderDet__3213E83FD22EA4EA");

                    b.HasIndex("IdAddress");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdProduct");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("orderDate");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethod");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalValue");

                    b.HasKey("Id")
                        .HasName("PK__Order__3213E83F9A3D929F");

                    b.HasIndex("IdUser");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("HasStock")
                        .HasColumnType("bit")
                        .HasColumnName("hasStock");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK__Product__3213E83FE8651353");

                    b.HasIndex("IdCategory");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Access")
                        .HasColumnType("int")
                        .HasColumnName("access");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3213E83FD2A0C535");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Login")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("PK__User__3213E83F93B1F8BB");

                    b.HasIndex("IdRole");

                    b.HasIndex(new[] { "Login" }, "UQ__User__7838F272EEAE83E7")
                        .IsUnique()
                        .HasFilter("[login] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Addresses.Address", b =>
                {
                    b.HasOne("WinglyShop.Domain.Entities.Users.User", "IdUserNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Addresses_Users");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.CartDetails.CartDetail", b =>
                {
                    b.HasOne("WinglyShop.Domain.Entities.Carts.Cart", "IdCartNavigation")
                        .WithMany("CartDetails")
                        .HasForeignKey("IdCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CartDetails_Carts");

                    b.HasOne("WinglyShop.Domain.Entities.Products.Product", "IdProductNavigation")
                        .WithMany("CartDetails")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_CartDetails_Products");

                    b.Navigation("IdCartNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Carts.Cart", b =>
                {
                    b.HasOne("WinglyShop.Domain.Entities.Users.User", "IdUserNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Carts_Users");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.OrderDetails.OrderDetail", b =>
                {
                    b.HasOne("WinglyShop.Domain.Entities.Addresses.Address", "IdAddressNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdAddress")
                        .HasConstraintName("FK_OrderDetails_Addresses");

                    b.HasOne("WinglyShop.Domain.Entities.Orders.Order", "IdOrderNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_OrderDetails_Orders");

                    b.HasOne("WinglyShop.Domain.Entities.Products.Product", "IdProductNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_OrderDetails_Products");

                    b.Navigation("IdAddressNavigation");

                    b.Navigation("IdOrderNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("WinglyShop.Domain.Entities.Users.User", "IdUserNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_Orders_Users");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("WinglyShop.Domain.Entities.Categories.Category", "IdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("FK_Products_Categories");

                    b.Navigation("IdCategoryNavigation");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("WinglyShop.Domain.Entities.Roles.Role", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Addresses.Address", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Carts.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Categories.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Roles.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WinglyShop.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
